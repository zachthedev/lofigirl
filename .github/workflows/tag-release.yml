name: CD - Tag Release

# This workflow automatically creates releases when version tags are pushed
# It's designed to work alongside the manual "Create Release" workflow
on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libglib2.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libxdo-dev \
            pkg-config

      - name: Setup Xcode (macOS only)
        if: matrix.platform == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Get version from tag
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build the app and create release
        uses: tauri-apps/tauri-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ steps.get_version.outputs.VERSION }}
          releaseName: 'Lofi Girl ${{ steps.get_version.outputs.VERSION }}'
          releaseBody: |
            ## What's New in ${{ steps.get_version.outputs.VERSION }}
            
            ### Downloads
            Choose the right download for your platform:
            
            **Windows:**
            - `.msi` - Windows installer (recommended)
            - `.exe` - Portable executable
            
            **macOS:**
            - `.dmg` - macOS disk image (recommended)
            - `.app.tar.gz` - Application bundle
            
            **Linux:**
            - `.deb` - Debian/Ubuntu package
            - `.rpm` - RedHat/Fedora package  
            - `.AppImage` - Portable application
            
            ### Installation Notes
            The builds are **unsigned**, so you might get a security warning when running them:
            - **macOS**: Right-click → Open, then click "Open" in the dialog
            - **Windows**: Click "More info" → "Run anyway" in Windows Defender SmartScreen
            
            ---
            
            See the assets below to download and install this version.
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}