name: Commit Validation

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

permissions:
  contents: read

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]' && github.event.pull_request.draft == false
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
      
      - name: Install dependencies
        run: npm ci --include=dev || npm install --include=dev
      
      - name: Validate commit messages
        run: |
          # Get commit range for this PR
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          echo "üîç Validating commits from $BASE_SHA to $HEAD_SHA"
          
          FAILED_COMMITS=""
          
          # Check each commit with commitlint
          while IFS='|' read -r commit_hash commit_message; do
            if [ -n "$commit_hash" ] && [ -n "$commit_message" ]; then
              echo "Checking: $commit_message"
              
              if ! echo "$commit_message" | npx commitlint --config ./commitlint.config.js --quiet; then
                echo "‚ùå Invalid: $commit_message"
                FAILED_COMMITS="${FAILED_COMMITS}‚ùå $commit_message\n"
              else
                echo "‚úÖ Valid: $commit_message"
              fi
            fi
          done < <(git log --format="%H|%s" --reverse "$BASE_SHA..$HEAD_SHA")
          
          # If any commits failed, provide helpful guidance and fail
          if [ -n "$FAILED_COMMITS" ]; then
            echo ""
            echo "‚ùå COMMIT VALIDATION FAILED"
            echo ""
            echo "The following commits don't follow Conventional Commits format:"
            echo -e "$FAILED_COMMITS"
            echo ""
            echo "üí° Quick fix suggestions:"
            echo "  ‚Ä¢ feat: Add new feature or functionality"
            echo "  ‚Ä¢ fix: Fix a bug or issue"
            echo "  ‚Ä¢ docs: Update documentation"
            echo "  ‚Ä¢ chore: Maintenance, dependencies, etc."
            echo "  ‚Ä¢ refactor: Code restructuring (no functional changes)"
            echo "  ‚Ä¢ style: Code formatting (no functional changes)"
            echo "  ‚Ä¢ test: Add or update tests"
            echo "  ‚Ä¢ ci: CI/CD changes"
            echo ""
            echo "üîß How to fix:"
            echo "  1. Use 'Squash and merge' with a proper commit message, or"
            echo "  2. Rewrite commit history: git rebase -i HEAD~N"
            echo ""
            exit 1
          fi
          
          echo "‚úÖ All commits follow Conventional Commits format!"