name: Commit Validation

on:
  pull_request:
    branches: ["main", "develop"]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-commits:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node

      - name: Validate commit messages
        id: validate
        run: |
          echo "Validating commits in PR #${{ github.event.pull_request.number }}"
          
          # Get commits in this PR
          COMMITS=$(git log --oneline ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          INVALID_COMMITS=""
          VALID_COUNT=0
          TOTAL_COUNT=0
          
          while IFS= read -r commit; do
            if [ -n "$commit" ]; then
              TOTAL_COUNT=$((TOTAL_COUNT + 1))
              COMMIT_MSG=$(echo "$commit" | cut -d' ' -f2-)
              COMMIT_HASH=$(echo "$commit" | cut -d' ' -f1)
              
              echo "Checking: $COMMIT_MSG"
              
              if echo "$COMMIT_MSG" | npx commitlint --from=HEAD~1; then
                VALID_COUNT=$((VALID_COUNT + 1))
                echo "‚úÖ Valid: $COMMIT_MSG"
              else
                INVALID_COMMITS="$INVALID_COMMITS- \`$COMMIT_HASH\`: $COMMIT_MSG\n"
                echo "‚ùå Invalid: $COMMIT_MSG"
              fi
            fi
          done <<< "$COMMITS"
          
          echo "validation_result=$VALID_COUNT/$TOTAL_COUNT commits valid" >> $GITHUB_OUTPUT
          
          if [ "$VALID_COUNT" -eq "$TOTAL_COUNT" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "All commits follow conventional commit format! ‚úÖ"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo -e "invalid_commits<<EOF\n$INVALID_COMMITS\nEOF" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR with validation results
        if: steps.validate.outputs.status == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const invalidCommits = `${{ steps.validate.outputs.invalid_commits }}`;
            const body = `## üìù Commit Message Validation Failed
            
            Some commits in this PR don't follow the [Conventional Commits](https://www.conventionalcommits.org/) format:
            
            ${invalidCommits}
            
            ### ‚úÖ Expected Format:
            - \`feat: add new feature\`
            - \`fix: resolve bug in component\`
            - \`chore: update dependencies\`
            - \`docs: improve README\`
            - \`style: fix formatting\`
            - \`refactor: restructure code\`
            - \`test: add unit tests\`
            - \`perf: optimize performance\`
            
            ### üí° Quick Fixes:
            - Use **"Squash and merge"** when merging to create a single conventional commit
            - Or rewrite commit messages using: \`git commit --amend -m "feat: your message"\`
            
            The PR can still be merged using "Squash and merge" with a proper commit message.`;
            
            // Delete previous bot comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            for (const comment of comments.data) {
              if (comment.user.type === 'Bot' && comment.body.includes('Commit Message Validation')) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                });
              }
            }
            
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

      - name: Set check status
        run: |
          if [ "${{ steps.validate.outputs.status }}" = "failure" ]; then
            echo "‚ùå Commit validation failed"
            echo "Use 'Squash and merge' with a conventional commit message when merging."
            exit 1
          else
            echo "‚úÖ All commits are valid!"
          fi