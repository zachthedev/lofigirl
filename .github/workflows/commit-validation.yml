name: Commit Validation

on:
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-commits:
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: npm
      
      - name: Install dependencies
        run: npm ci || npm install
      
      - name: Validate commit messages and comment on PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get commit range for this PR
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          echo "üîç Validating commits from $BASE_SHA to $HEAD_SHA"
          
          # Skip validation if no commits to check
          if ! git log --oneline "$BASE_SHA..$HEAD_SHA" | head -1; then
            echo "‚úÖ No commits to validate"
            exit 0
          fi
          
          FAILED_COMMITS=""
          FAILED_DETAILS=""
          
          # Check each commit with commitlint
          while IFS='|' read -r commit_hash commit_message; do
            if [ -n "$commit_hash" ] && [ -n "$commit_message" ]; then
              echo "Checking: $commit_message"
              
              if ! echo "$commit_message" | npx commitlint --config ./commitlint.config.js --quiet; then
                echo "‚ùå Invalid: $commit_message"
                FAILED_COMMITS="${FAILED_COMMITS}‚Ä¢ \`${commit_message}\`\n"
                
                # Get suggested fix
                if [[ "$commit_message" =~ ^(Initial|Add|Create|Implement|Build|Setup) ]]; then
                  SUGGESTION="feat: $(echo "$commit_message" | sed 's/^[A-Z]/\L&/')"
                elif [[ "$commit_message" =~ ^(Delete|Remove|Clean) ]]; then
                  SUGGESTION="chore: $(echo "$commit_message" | sed 's/^[A-Z]/\L&/')"
                elif [[ "$commit_message" =~ ^(Fix|Repair|Resolve) ]]; then
                  SUGGESTION="fix: $(echo "$commit_message" | sed 's/^[A-Z]/\L&/')"
                elif [[ "$commit_message" =~ ^(Update|Change) ]]; then
                  SUGGESTION="feat: $(echo "$commit_message" | sed 's/^[A-Z]/\L&/')"
                else
                  SUGGESTION="feat: $(echo "$commit_message" | sed 's/^[A-Z]/\L&/')"
                fi
                
                FAILED_DETAILS="${FAILED_DETAILS}  - **Current:** \`${commit_message}\`\n  - **Suggested:** \`${SUGGESTION}\`\n\n"
              else
                echo "‚úÖ Valid: $commit_message"
              fi
            fi
          done < <(git log --format="%H|%s" --reverse "$BASE_SHA..$HEAD_SHA")
          
          # If any commits failed, create PR comment and fail
          if [ -n "$FAILED_COMMITS" ]; then
            # Delete previous validation comments to avoid spam
            gh api graphql -f query='
              query($owner: String!, $repo: String!, $pr: Int!) {
                repository(owner: $owner, name: $repo) {
                  pullRequest(number: $pr) {
                    comments(first: 100) {
                      nodes {
                        id
                        author {
                          login
                        }
                        body
                      }
                    }
                  }
                }
              }' -f owner="${{ github.repository_owner }}" -f repo="${{ github.event.repository.name }}" -F pr="${{ github.event.pull_request.number }}" \
              --jq '.data.repository.pullRequest.comments.nodes[] | select(.author.login == "github-actions[bot]" and (.body | contains("‚ùå Commit Validation Failed"))) | .id' \
              | while read comment_id; do
                  if [ -n "$comment_id" ]; then
                    gh api graphql -f query='mutation($id: ID!) { deleteIssueComment(input: {id: $id}) { clientMutationId } }' -f id="$comment_id"
                  fi
                done
            
            # Create new comment with validation results
            COMMENT_BODY="## ‚ùå Commit Validation Failed

The following commits don't follow [Conventional Commits](https://conventionalcommits.org/) format:

${FAILED_DETAILS}

### üí° Commit Types Reference:
- \`feat:\` New features or functionality
- \`fix:\` Bug fixes  
- \`docs:\` Documentation updates
- \`chore:\` Maintenance, dependencies, tooling
- \`refactor:\` Code changes (no functional changes)
- \`style:\` Formatting (no functional changes) 
- \`test:\` Add or update tests
- \`ci:\` CI/CD pipeline changes

### üîß How to Fix:
When merging this PR, use **\"Squash and merge\"** with a proper conventional commit message format.

---
*This validation ensures consistent commit history and automated changelog generation.*"
            
            gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY"
            
            echo ""
            echo "‚ùå COMMIT VALIDATION FAILED"
            echo ""
            echo "The following commits don't follow Conventional Commits format:"
            echo -e "$FAILED_COMMITS"
            echo ""
            echo "A comment has been added to the PR with detailed suggestions."
            exit 1
          fi
          
          echo "‚úÖ All commits follow Conventional Commits format!"