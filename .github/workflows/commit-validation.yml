name: Commit Validation

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
      
      - name: Install dependencies
        run: |
          npm ci --include=dev || npm install --include=dev
      
      - name: Validate commit messages
        run: |
          # Get the range of commits for this PR
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          echo "Checking commits from $BASE_SHA to $HEAD_SHA"
          
          # Track validation results
          VALIDATION_FAILED=false
          SUGGESTIONS=""
          
          # Check each commit in the PR
          git log --format="%H|%s" --reverse $BASE_SHA..$HEAD_SHA | while IFS='|' read commit_hash commit_message; do
            echo "Checking commit: $commit_hash - $commit_message"
            
            # Test if commit message follows conventional commits
            if ! echo "$commit_message" | npx commitlint --config ./commitlint.config.js --quiet; then
              echo "❌ Non-conforming commit: $commit_message"
              echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
              
              # Generate helpful suggestion
              SUGGESTED_MESSAGE=""
              
              # Smart suggestions based on common patterns
              if echo "$commit_message" | grep -qiE "^(delete|remove|rm).*\.md$"; then
                SUGGESTED_MESSAGE="docs: $(echo "$commit_message" | sed 's/^[Dd]elete[[:space:]]*//' | sed 's/^[Rr]emove[[:space:]]*//' | sed 's/^[Rr]m[[:space:]]*//')"
              elif echo "$commit_message" | grep -qiE "^(delete|remove|rm)"; then
                SUGGESTED_MESSAGE="chore: $(echo "$commit_message" | sed 's/^[Dd]elete[[:space:]]*//' | sed 's/^[Rr]emove[[:space:]]*//' | sed 's/^[Rr]m[[:space:]]*//')"
              elif echo "$commit_message" | grep -qiE "^(add|create).*\.md$"; then
                SUGGESTED_MESSAGE="docs: $(echo "$commit_message" | sed 's/^[Aa]dd[[:space:]]*//' | sed 's/^[Cc]reate[[:space:]]*//')"
              elif echo "$commit_message" | grep -qiE "^(add|create|implement)"; then
                SUGGESTED_MESSAGE="feat: $(echo "$commit_message" | sed 's/^[Aa]dd[[:space:]]*//' | sed 's/^[Cc]reate[[:space:]]*//' | sed 's/^[Ii]mplement[[:space:]]*//')"
              elif echo "$commit_message" | grep -qiE "^(fix|repair|resolve)"; then
                SUGGESTED_MESSAGE="fix: $(echo "$commit_message" | sed 's/^[Ff]ix[[:space:]]*//' | sed 's/^[Rr]epair[[:space:]]*//' | sed 's/^[Rr]esolve[[:space:]]*//')"
              elif echo "$commit_message" | grep -qiE "^(update|upgrade|modify|change).*\.md$"; then
                SUGGESTED_MESSAGE="docs: $(echo "$commit_message" | sed 's/^[Uu]pdate[[:space:]]*//' | sed 's/^[Uu]pgrade[[:space:]]*//' | sed 's/^[Mm]odify[[:space:]]*//' | sed 's/^[Cc]hange[[:space:]]*//')"
              elif echo "$commit_message" | grep -qiE "^(update|upgrade|modify|change)"; then
                SUGGESTED_MESSAGE="chore: $(echo "$commit_message" | sed 's/^[Uu]pdate[[:space:]]*//' | sed 's/^[Uu]pgrade[[:space:]]*//' | sed 's/^[Mm]odify[[:space:]]*//' | sed 's/^[Cc]hange[[:space:]]*//')"
              elif echo "$commit_message" | grep -qiE "^(test|tests)"; then
                SUGGESTED_MESSAGE="test: $(echo "$commit_message" | sed 's/^[Tt]est[s]*[[:space:]]*//')"
              elif echo "$commit_message" | grep -qiE "^(style|format)"; then
                SUGGESTED_MESSAGE="style: $(echo "$commit_message" | sed 's/^[Ss]tyle[[:space:]]*//' | sed 's/^[Ff]ormat[[:space:]]*//')"
              else
                # Default to chore if we can't determine the type
                SUGGESTED_MESSAGE="chore: $commit_message"
              fi
              
              # Ensure first character after type is uppercase
              SUGGESTED_MESSAGE=$(echo "$SUGGESTED_MESSAGE" | sed 's/\(^[a-z]*: \)\(.\)/\1\U\2/')
              
              echo "💡 Suggested: $SUGGESTED_MESSAGE"
              echo "- \`$commit_message\` → \`$SUGGESTED_MESSAGE\`" >> /tmp/suggestions.txt
            else
              echo "✅ Commit follows conventional format"
            fi
          done
      
      - name: Comment on PR with suggestions
        if: env.VALIDATION_FAILED == 'true'
        run: |
          if [ -f /tmp/suggestions.txt ]; then
            SUGGESTION_COUNT=$(wc -l < /tmp/suggestions.txt)
            
            gh pr comment ${{ github.event.pull_request.number }} --body \
              "## 🤖 Commit Message Validation
              
              Found $SUGGESTION_COUNT commit messages that don't follow [Conventional Commits](https://www.conventionalcommits.org/) format:
              
              $(cat /tmp/suggestions.txt)
              
              **Options to fix this:**
              1. **Squash and merge** with a proper commit message (easiest)
              2. **Rewrite commit messages** using \`git rebase -i\` if you prefer clean history
              
              **Valid prefixes:**
              - \`feat:\` - New features
              - \`fix:\` - Bug fixes  
              - \`docs:\` - Documentation changes
              - \`chore:\` - Maintenance tasks
              - \`style:\` - Code formatting
              - \`test:\` - Test additions/updates"
            
            echo "❌ Commit validation failed. See PR comment for details."
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Success message
        if: env.VALIDATION_FAILED != 'true'
        run: |
          echo "✅ All commits follow conventional commit format!"