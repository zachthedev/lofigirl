name: Release

# Unified release workflow that handles both manual releases and tag-based releases
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.0.1)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      build_ref:
        description: 'Branch/commit to build from (defaults to main)'
        required: false
        default: 'main'
        type: string
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare-release:
    # Only run the preparation step for manual releases, not tag pushes
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-24.04
    outputs:
      tag: ${{ steps.create-tag.outputs.tag }}
      version_no_v: ${{ steps.version.outputs.version_no_v }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.build_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate version format
        run: |
          if [[ ! "${{ inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "❌ Version must be in format v0.0.0 or v0.0.0-suffix"
            exit 1
          fi

      - name: Check if tag exists
        run: |
          if git rev-parse "${{ inputs.version }}" >/dev/null 2>&1; then
            echo "❌ Tag ${{ inputs.version }} already exists"
            exit 1
          fi

      - name: Set version output
        id: version
        run: |
          VERSION="${{ inputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          echo "version_no_v=$VERSION_NO_V" >> $GITHUB_OUTPUT

      - name: Update version files
        run: |
          VERSION_NO_V="${{ steps.version.outputs.version_no_v }}"
          
          # Update tauri.conf.json
          jq --arg version "$VERSION_NO_V" '.version = $version' src-tauri/tauri.conf.json > tmp.json && mv tmp.json src-tauri/tauri.conf.json
          
          # Update Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$VERSION_NO_V\"/" src-tauri/Cargo.toml
          
          echo "Updated versions to: $VERSION_NO_V"

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src-tauri/tauri.conf.json src-tauri/Cargo.toml
          if git diff --staged --quiet; then
            echo "No version changes to commit"
          else
            git commit -m "chore: bump version to ${{ inputs.version }}"
            git push origin HEAD
          fi

      - name: Create and push tag
        id: create-tag
        run: |
          git tag "${{ inputs.version }}"
          git push origin "${{ inputs.version }}"
          echo "tag=${{ inputs.version }}" >> $GITHUB_OUTPUT

  # Try to use existing CI artifacts first, then fall back to full build
  check-ci-artifacts:
    runs-on: ubuntu-24.04
    needs: [prepare-release]
    if: always() && (needs.prepare-release.result == 'success' || github.event_name == 'push')
    outputs:
      artifacts_available: ${{ steps.check.outputs.available }}
      run_id: ${{ steps.check.outputs.run_id }}
    steps:
      - name: Check for recent successful CI artifacts
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REF_TO_CHECK="${{ needs.prepare-release.outputs.tag || github.ref_name }}"
          echo "Checking for CI artifacts for ref: $REF_TO_CHECK"
          
          # Get the latest successful CI run for this ref
          RUN_ID=$(gh api repos/${{ github.repository }}/actions/workflows/ci.yml/runs \
            --jq ".workflow_runs[] | select(.head_sha == \"$(git rev-parse $REF_TO_CHECK)\") | select(.conclusion == \"success\") | .id" \
            | head -1)
          
          if [ -n "$RUN_ID" ]; then
            echo "Found successful CI run: $RUN_ID"
            echo "available=true" >> $GITHUB_OUTPUT
            echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          else
            echo "No recent CI artifacts found, will build from scratch"
            echo "available=false" >> $GITHUB_OUTPUT
            echo "run_id=" >> $GITHUB_OUTPUT
          fi

  build-and-release:
    needs: [prepare-release, check-ci-artifacts]
    # Run if manual release preparation succeeded, OR if this is a tag push
    if: always() && (needs.prepare-release.result == 'success' || github.event_name == 'push')
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-24.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-release.outputs.tag || github.ref_name }}

      # Try to download existing artifacts first if available
      - name: Download CI artifacts
        if: needs.check-ci-artifacts.outputs.artifacts_available == 'true'
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.platform }}-${{ matrix.target }}
          run-id: ${{ needs.check-ci-artifacts.outputs.run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # If no artifacts or download failed, build from scratch
      - name: Setup Node.js
        if: needs.check-ci-artifacts.outputs.artifacts_available != 'true' || failure()
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: npm

      - name: Install Node.js dependencies
        if: needs.check-ci-artifacts.outputs.artifacts_available != 'true' || failure()
        run: npm ci || npm install

      - name: Setup Rust toolchain
        if: needs.check-ci-artifacts.outputs.artifacts_available != 'true' || failure()
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install system dependencies (Ubuntu only)
        if: (needs.check-ci-artifacts.outputs.artifacts_available != 'true' || failure()) && matrix.platform == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libglib2.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libxdo-dev \
            pkg-config

      - name: Setup Xcode (macOS only)
        if: (needs.check-ci-artifacts.outputs.artifacts_available != 'true' || failure()) && matrix.platform == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Cache Rust dependencies
        if: needs.check-ci-artifacts.outputs.artifacts_available != 'true' || failure()
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Get release info
        id: release_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual release
            echo "tag=${{ needs.prepare-release.outputs.tag }}" >> $GITHUB_OUTPUT
            echo "prerelease=${{ inputs.prerelease }}" >> $GITHUB_OUTPUT
            echo "draft=true" >> $GITHUB_OUTPUT
          else
            # Tag push
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "draft=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and create release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ steps.release_info.outputs.tag }}
          releaseName: 'Lofi Girl ${{ steps.release_info.outputs.tag }}'
          releaseBody: |
            ## What's New in ${{ steps.release_info.outputs.tag }}
            
            ### Downloads
            Choose the right download for your platform:
            
            **Windows:**
            - `.msi` - Windows installer (recommended)
            - `.exe` - Portable executable
            
            **macOS:**
            - `.dmg` - macOS disk image (recommended)
            - `.app.tar.gz` - Application bundle
            
            **Linux:**
            - `.deb` - Debian/Ubuntu package
            - `.rpm` - RedHat/Fedora package  
            - `.AppImage` - Portable application
            
            ### Installation Notes
            The builds are **unsigned**, so you might get a security warning when running them:
            - **macOS**: Right-click → Open, then click "Open" in the dialog
            - **Windows**: Click "More info" → "Run anyway" in Windows Defender SmartScreen
            
            ---
            
            See the assets below to download and install this version.
          releaseDraft: ${{ steps.release_info.outputs.draft }}
          prerelease: ${{ steps.release_info.outputs.prerelease }}
          args: ${{ matrix.args }}